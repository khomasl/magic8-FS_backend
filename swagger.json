{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "Swagger for kapusta",
    "description": "Kapusta swagger documentation",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    { "url": "http://localhost:5000" },
    { "url": "https://kapusta-magic8.herokuapp.com" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Transaction",
      "description": "Transaction endpoints"
    }
  ],
  "paths": {
    "/api/users/registration": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email is already exist",
            "content": {}
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentification",
        "parameters": [],
        "requestBody": {
          "description": "Log in's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Invalid credentials",
            "content": {}
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentification",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Log out's object",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogOutRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogOutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "User authentification",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Currents's object",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Succes operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthorized"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      }
    },
    "/api/users/verify": {
      "get": {
        "tags": ["Auth"],
        "summary": "User verification by email",
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "required": true,
            "type": "string",
            "description": "verification token by email"
          }
        ],

        "responses": {
          "200": {
            "description": "Success operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/successOperationResponse"
                }
              }
            }
          },

          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["Auth"],
        "summary": "User re-verificztion",
        "parameters": [],
        "requestBody": {
          "description": "Repeat email for verification  object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepeatEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepeatEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "503": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailable"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "John Doe"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RepeatEmailRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },

      "LogOutRequest": {},
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "61ffbac74cfa19a32e603ae1"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "example": "user@example.com",
                "format": "email"
              },
              "verificationEmailSend": {
                "type": "boolean",
                "example": "true"
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request",
            "example": "success"
          },
          "code": {
            "type": "number",
            "description": "Status of request",
            "example": "200"
          },
          "data": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
              },
              "email": {
                "type": "string",
                "example": "user@example.com",
                "format": "email"
              }
            }
          }
        }
      },

      "RepeatEmailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Verification email sent"
              }
            }
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request",
            "example": "success"
          },
          "code": {
            "type": "number",
            "description": "Status of request",
            "example": "200"
          },
          "data": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "user@example.com",
                "format": "email"
              },
              "properties": {
                "name": {
                  "type": "string",
                  "example": "John Doe"
                }
              }
            }
          }
        }
      },
      "NotAuthorized": {
        "type": "object",
        "properties": {
          "status": {
            "type": "stribg",
            "description": "Status of request",
            "example": "success"
          },
          "code": {
            "type": "number",
            "description": "Status of request"
          },
          "data": {
            "type": "object"
          }
        },
        "example": {
          "status": "error",
          "code": 409,
          "message": "Not authorized"
        }
      },
      "successOperationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request",
            "example": "success"
          },
          "code": {
            "type": "number",
            "description": "Status of request",
            "example": "200"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Success"
              }
            }
          }
        }
      },
      "ServiceUnavailable": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "example": "503"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "User with this email not found"
              }
            }
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
